{"ast":null,"code":"import React, { useState, useEffect, useContext, useRef } from 'react';\nimport * as Style from \".././Common/SignUpStyle\";\nimport { Link } from 'react-router-dom';\nimport SignUpContext from \"./SignUpContext\";\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nfunction IdInputForm() {\n\n  //  const [id, setId] = useContext(SignUpContext);\n  //\n  //  const [idError, setIdError] = useState('');\n  //  const [idMessage, setIdMessage] = useState('');\n  //  const [isIdDuplicated, setIsIdDuplicated] = useState(false); // 아이디 중복 검사를 했는지 안했는지\n  //  const [isIdAvailable, setIsIdAvailable] = useState(false); // 아이디 사용 가능한지 아닌지\n  //\n  //  const idInputRef = useRef();\n  //  const navigate = useNavigate();\n  //\n  //\n  //  const onChangeIdHandler = (e) => {\n  //    const idValue = e.target.value;\n  //\n  //    // id 유효성 검사\n  //    idCheckHandler(idValue);\n  //  }\n  //\n  //  const idCheckHandler = async (id) => {\n  //    const idRegex = /^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d]{5,15}$/;\n  //\n  //    if (id === '') {\n  //      setIdError('아이디를 입력해주세요.');\n  //      setIsIdAvailable(false);\n  //      return false;\n  //\n  //    } else if (!idRegex.test(id)) {\n  //      setIdError('아이디는 5~15자의 영소문자, 숫자만 입력 가능합니다.');\n  //      setIsIdAvailable(false);\n  //      return false;\n  //    }\n  //\n  //    try {\n  //      idDuplicationCheck(id); // 아이디 중복 검사\n  //\n  //    } catch (error) {\n  //     console.error(error);\n  //       if (error.response && error.response.data && error.response.data.message) {\n  //         setIdError(error.response.data.message);\n  //       } else {\n  //         setIdError('서버 오류입니다. 관리자에게 문의하세요.');\n  //       }\n  //       return false;\n  //    }\n  //  }\n  //\n  //  const idDuplicationCheck = async(userId) => {\n  //    await axios.post(\"http://localhost:9000/users/check-duplication/userId\" , {\n  //        userId : userId,\n  //    })\n  //    .then((response) => {\n  //        console.log(response);\n  //\n  //        if(response?.data?.isDuplicated == null || response.data.message == null) {\n  //            setIdError(\"잘못된 요청입니다.\");\n  //            return;\n  //        }\n  //\n  //        setIsIdAvailable(!response.data.isDuplicated);\n  //        setIdMessage(response.data.message);\n  //\n  //    })\n  //    .catch(function(error) {\n  //        console.log(error);\n  //        setIdError(\"요청 처리 중 오류가 발생했습니다. 다시 시도해주세요.\");\n  //\n  //    })\n  //  }\n  //\n  //  const DisplayMessage = ({ idError, idMessage }) => { // message or error 출력\n  //    if (idError) {\n  //      return <Style.ErrorMessage>{idError}</Style.ErrorMessage>;\n  //    } else if (idMessage) {\n  //      return <Style.Message>{idMessage}</Style.Message>;\n  //    }\n  //      return null;\n  //    };\n  //\n  //  const onFormSubmit = (event) => {\n  //    event.preventDefault();\n  //    const id = idInputRef.current.value;\n  //    setId(id);\n  //    console.log(id);\n  //\n  //    // history.push()를 사용하여 원하는 URL로 라우팅합니다.\n  //    navigate('/signUp/password');\n  //\n  //  };\n  //\n  //  return (\n  //    <>\n  //    <Style.Instruction>아이디를 입력해주세요.</Style.Instruction>\n  //\n  //    <Style.InputField\n  //        ref = {idInputRef}\n  //        onChange={onChangeIdHandler}\n  //        type=\"text\"\n  //        id='id'\n  //        name='id'\n  //        value={id}\n  //        placeholder='아이디 입력'\n  //        theme='underLine'\n  //        maxLength={15}\n  //        />\n  //\n  //    <DisplayMessage idError={idError} idMessage={idMessage} />\n  //\n  //\n  //    <Style.StepInfo>1 of 3</Style.StepInfo>\n  //\n  //    <Style.ProgressSection>\n  //        <Style.ProgressBar />\n  //    </Style.ProgressSection>\n  //\n  //    <form onSubmit = {onFormSubmit}>\n  //      <Style.NextButton disabled={isIdAvailable} type = \"submit\"> 다음 </Style.NextButton>\n  //    </form>\n  //\n  //    <Style.FooterIndicator />\n  //\n  //    </>\n  //  );\n}\n_c = IdInputForm;\nexport default IdInputForm;\nvar _c;\n$RefreshReg$(_c, \"IdInputForm\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","Style","Link","SignUpContext","axios","useNavigate","IdInputForm","_c","$RefreshReg$"],"sources":["/Users/ahnkwanghyun/project/faddy/src/main/frontend/src/SignUp/CreateIdPage.js"],"sourcesContent":["import React, { useState , useEffect , useContext , useRef } from 'react';\nimport * as Style from \".././Common/SignUpStyle\";\nimport { Link } from 'react-router-dom';\nimport SignUpContext from \"./SignUpContext\";\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction IdInputForm() {\n\n//  const [id, setId] = useContext(SignUpContext);\n//\n//  const [idError, setIdError] = useState('');\n//  const [idMessage, setIdMessage] = useState('');\n//  const [isIdDuplicated, setIsIdDuplicated] = useState(false); // 아이디 중복 검사를 했는지 안했는지\n//  const [isIdAvailable, setIsIdAvailable] = useState(false); // 아이디 사용 가능한지 아닌지\n//\n//  const idInputRef = useRef();\n//  const navigate = useNavigate();\n//\n//\n//  const onChangeIdHandler = (e) => {\n//    const idValue = e.target.value;\n//\n//    // id 유효성 검사\n//    idCheckHandler(idValue);\n//  }\n//\n//  const idCheckHandler = async (id) => {\n//    const idRegex = /^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d]{5,15}$/;\n//\n//    if (id === '') {\n//      setIdError('아이디를 입력해주세요.');\n//      setIsIdAvailable(false);\n//      return false;\n//\n//    } else if (!idRegex.test(id)) {\n//      setIdError('아이디는 5~15자의 영소문자, 숫자만 입력 가능합니다.');\n//      setIsIdAvailable(false);\n//      return false;\n//    }\n//\n//    try {\n//      idDuplicationCheck(id); // 아이디 중복 검사\n//\n//    } catch (error) {\n//     console.error(error);\n//       if (error.response && error.response.data && error.response.data.message) {\n//         setIdError(error.response.data.message);\n//       } else {\n//         setIdError('서버 오류입니다. 관리자에게 문의하세요.');\n//       }\n//       return false;\n//    }\n//  }\n//\n//  const idDuplicationCheck = async(userId) => {\n//    await axios.post(\"http://localhost:9000/users/check-duplication/userId\" , {\n//        userId : userId,\n//    })\n//    .then((response) => {\n//        console.log(response);\n//\n//        if(response?.data?.isDuplicated == null || response.data.message == null) {\n//            setIdError(\"잘못된 요청입니다.\");\n//            return;\n//        }\n//\n//        setIsIdAvailable(!response.data.isDuplicated);\n//        setIdMessage(response.data.message);\n//\n//    })\n//    .catch(function(error) {\n//        console.log(error);\n//        setIdError(\"요청 처리 중 오류가 발생했습니다. 다시 시도해주세요.\");\n//\n//    })\n//  }\n//\n//  const DisplayMessage = ({ idError, idMessage }) => { // message or error 출력\n//    if (idError) {\n//      return <Style.ErrorMessage>{idError}</Style.ErrorMessage>;\n//    } else if (idMessage) {\n//      return <Style.Message>{idMessage}</Style.Message>;\n//    }\n//      return null;\n//    };\n//\n//  const onFormSubmit = (event) => {\n//    event.preventDefault();\n//    const id = idInputRef.current.value;\n//    setId(id);\n//    console.log(id);\n//\n//    // history.push()를 사용하여 원하는 URL로 라우팅합니다.\n//    navigate('/signUp/password');\n//\n//  };\n//\n//  return (\n//    <>\n//    <Style.Instruction>아이디를 입력해주세요.</Style.Instruction>\n//\n//    <Style.InputField\n//        ref = {idInputRef}\n//        onChange={onChangeIdHandler}\n//        type=\"text\"\n//        id='id'\n//        name='id'\n//        value={id}\n//        placeholder='아이디 입력'\n//        theme='underLine'\n//        maxLength={15}\n//        />\n//\n//    <DisplayMessage idError={idError} idMessage={idMessage} />\n//\n//\n//    <Style.StepInfo>1 of 3</Style.StepInfo>\n//\n//    <Style.ProgressSection>\n//        <Style.ProgressBar />\n//    </Style.ProgressSection>\n//\n//    <form onSubmit = {onFormSubmit}>\n//      <Style.NextButton disabled={isIdAvailable} type = \"submit\"> 다음 </Style.NextButton>\n//    </form>\n//\n//    <Style.FooterIndicator />\n//\n//    </>\n//  );\n}\n\nexport default IdInputForm;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAGC,SAAS,EAAGC,UAAU,EAAGC,MAAM,QAAQ,OAAO;AACzE,OAAO,KAAKC,KAAK,MAAM,yBAAyB;AAChD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAG9C,SAASC,WAAWA,CAAA,EAAG;;EAEvpB,eAAeA,WAAW;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}